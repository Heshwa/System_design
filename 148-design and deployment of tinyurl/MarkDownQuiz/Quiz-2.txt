
## Question 1
How will we maintain a unique mapping if redirection requests can go to different data centers that are geographically apart?
Does our design assume that our DB is consistent geographically?

### Answer
We initially assumed that our data center was globally consistent. Let's look at the problem differently and consider the opposite case: we need to filter the redirection requests based on data centers. 

**Solution**: An simple way of achieving this functionality is to introduce a unique character in the short URL. This special character will act as an indicator for the exact data center. 

**Example**: Let's assume that the short URL that needs redirection is service.com/x/short123/, where `x` indicates the data center containing this record.

In this solution, if the short URL goes to the wrong data center, it can be redirected to the correct one. However, if a specific data center is not reachable for a specific short URL (and that URL is not yet cached), the redirection will fail.
---------------------------------------

## Question 2
How will the data-center-specific caching handle an unseen redirection request?
### Answer
Since we've assumed the data-center-specific caching solution for our system, a case needs highlighting: handling unseen redirection requests by our system.

**Scenario**: The scenario entails receiving an unknown redirection request at a data center. Since the local cache wouldn't have that entry, it would fetch that record from the globally consistent database and place this entry into the local cache for future use. 
---------------------------------------

## Question 3
What is the probability of collision when we ask the short URL generator for a new short URL?
### Answer
We ask the sequencer for a unique ID and by the definition of our sequencer's design, there will never be duplication in IDs. We then encode those IDs, which also ensures no duplication. Hence, the regular short URL generation process ensures no duplication in records.
  
Now let's consider the case of custom short URLs. Since the user is providing the short URL, there can be a duplication. We can easily calculate the probability of this collision by taking into account the size of the database containing short URL records. 

Let's assume there are `n` already generated short URLs in the database. The probability that the user-provided custom short URL will be similar to an already existing one can be given by:

$Collision\ probability\ =\ n/ Total\ number\ of\ combinations\ of\ url.$

With growing `n`, the collision probability would increase, ranging from 0 when `n=0` and 1 when `n=total number of combinations`.

> This calculation assumes that the user selects a custom short URL randomly and equally likely from the set of allowed combinations. In reality, few words are more popular than others. So our probability can be seen as a lower bound on the probability of collusion.

---------------------------------------
