
## Question 1
We’re implementing view counters through an asynchronous method, which means that the number of views of a document may be outdated. Could we use sharded counters or Redis counters to get effective results?
### Answer
Both solutions (sharded counters or Redis counters) will work, though they seem excessive for counting views on documents.

To provide near real-time view counting, we can use a streaming pub-sub system, such as Kafka, where a topic can be based on a document identifier.


<!--
Indeed, it is a good solution to use sharded counters and/or Redis to store the number of views. However, the service of view counter for a system like collaborating document editing has little value and requires little investment in hardware infrastructure. 

Therefore, implementing it through a pub-sub system makes sense. With pub-sub counter will update periodically based on the priority we assign to the queue that handles the arrival of a new viewer.  
-->
---------------------------------------

## Question 2
The detailed design above doesn’t depict where the view counter data is saved. What would be suitable storage for the view counter, and what design changes will have to be made?
### Answer
For scalability purposes, it’s suitable to store the view counter data in NoSQL because the read/write latency of NoSQL is generally lower.

To complete the design, we’ll have to connect the view counter with the NoSQL database.

---------------------------------------
